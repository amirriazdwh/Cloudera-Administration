beeline> !connect jdbc:hive2://localhost:10000/default


 Attempt to do update or delete using transaction manager that does not support these operations. (state=42000,code=10294)

set --isolation=TRANSACTION_READ_COMMITTED;


set hive.txn.manager = org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;
CREATE TABLE customer_txn(cust_id int,customer_name varchar(20)) 
clustered by (cust_id) into 5 buckets 
stored as orc TBLPROPERTIES('transactional'='true');

CREATE TABLE college(clg_id int,clg_name string,clg_loc string) clustered by (clg_id) into 5 buckets stored as orc TBLPROPERTIES('transactional'='true');

----------------
Accessing HIVE via Beeline:
Starting beeline client
beeline --incremental=true
Note: The command line option “—incremental=true” is optional, but will extend the amount of time that you can remain idle and not have your connection dropped.

Connecting to hive2 server
!connect jdbc:hive2://silver-server-hive.app.google.com:10000/default
Note: You will be prompted for your username & password. USE user name and Password

beeline> !connect jdbc:hive2:// silver-server-hive.app.google.com:10000/default
scan complete in 3ms
Connecting to jdbc:hive2:// silver-server-hive.app.google.com:10000/default
Enter username for jdbc:hive2:// silver-server-hive.app.google.com:10000/default:suman
Enter password for jdbc:hive2:// silver-server-hive.app.google.com:10000/default: *********
Setting Your Queue (if any)

set mapred.job.queue.name=<your queue name>; 
Note: You need to set a queue in order to run queries.

Setting Your Database
USE google_map_data;
Note: You should be in a database when executing queries.

Reconnecting an inactive session
!reconnect jdbc:hive2:// silver-server-hive.app.google.com:10000/default; 
Quitting beeline client
!quit
Notes:
----------
Loading beeline, the URL and providing your username & password in one command:
beeline -u jdbc:hive2:// silver-server-hive.app.google.com:10000\ 
-n <yourname> -p <yourpassword> --incremental=true**
Basic Beeline Queries
Beeline supports a rich set of SQL query functions.
================
Getting Information About Data
SHOW DATABASES;
https://community.cloudera.com/t5/Community-Articles/Hive-on-Tez-Performance-Tuning-Determining-Reducer-Counts/ta-p/245680
USE <database>;

SHOW TABLES;
DESC <table>;
DESC FORMATTED <table>;
Simple limited select statements
SELECT * FROM google_map_city limit 25;



set hive.support.sql11.reserved.keywords=false;

set hive.execution.engine=tez;
set hive.execution.engine=mr;


set hive.cbo.enable=true;
set hive.compute.query.using.stats=true;
set hive.stats.fetch.column.stats=true;
set hive.stats.fetch.partition.stats=true;
set hive.vectorized.execution.enabled=true;
set hive.vectorized.execution.reduce.enabled = true;
set hive.vectorized.execution.reduce.groupby.enabled = true;

set hive.exec.parallel=true;
set hive.exec.parallel.thread.number=16;

set hive.exec.dynamic.partition.mode=nonstrict;

#There is a danger with many partition columns to generate many broken files in ORC.  To prevent that
> set hive.optimize.sort.dynamic.partition=true;

#if hive jobs previously ran much faster than in the current released 
version, look into potentially setting property 
> hive.optimize.sort.dynamic.partition = false .


> insert overwrite table benchmark_rawlogs_orc partition (p_silo,p_day,p_clienthash)
select  * FROM <original table>;


